<?xml version="1.0"?>
<html>
<head>
<script type="text/html" src="../DOM/System.xhtml"></script>
<script>
<![CDATA[

var Core = (function() {
	
var Node = function() {};
Node.ELEMENT_NODE = 1;
Node.ATTRIBUTE_NODE = 2;
Node.TEXT_NODE = 3;
Node.CDATA_SECTION_NODE = 4;
Node.ENTITY_REFERENCE_NODE = 5;
Node.ENTITY_NODE = 6;
Node.PROCESSING_INSTRUCTION_NODE = 7;
Node.COMMENT_NODE = 8;
Node.DOCUMENT_NODE = 9;
Node.DOCUMENT_TYPE_NODE = 10;
Node.DOCUMENT_FRAGMENT_NODE = 11;
Node.NOTATION_NODE = 12;

Node.DOCUMENT_POSITION_DISCONNECTED = 0x01;
Node.DOCUMENT_POSITION_PRECEDING = 0x02;
Node.DOCUMENT_POSITION_FOLLOWING = 0x04;
Node.DOCUMENT_POSITION_CONTAINS = 0x08;
Node.DOCUMENT_POSITION_CONTAINED_BY = 0x10;
Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

if (document.attachEvent) {
Node.cloneNode = function(node, deep) {
	var lookup = {
		"thead": [ "table" ],
		"tbody": [ "table" ],
		"tfoot": [ "table" ],
		"colgroup": [ "table" ],
		"col": [ "table", "colgroup" ],
		"tr": [ "table", "tbody" ],
		"td": [ "table", "tbody", "tr" ],
		"th": [ "table", "tbody", "tr" ],
		"option": [ "select" ],
		"li": [ "ul" ]
	}
	var tree = lookup[node.tagName.toLowerCase()] || [];
	var frag = document.createElement("div");
	var begin = "", end = "";
	for (var n=tree.length, i=0; i<n; i++) begin += "<" + tree[i] + ">";
	for (var i=tree.length-1; i>=0; i--) end += "</" + tree[i] + ">";
	frag.innerHTML = begin + (deep ? node.outerHTML : node.cloneNode(false).outerHTML) + end;
	var clone = frag.firstChild;
	for (var i=0; i<tree.length; i++) clone = clone.firstChild;
	clone.parentNode.removeChild(clone);
	return clone;
}

Node.insertBefore = function(node, child, ref) { // FIXME notify if child already in document?
	var isEntering = document.compareDocumentPosition(child) & 0x01;
	var result = node.insertBefore(child, ref);
	if (isEntering) notify("DOMNodeInserted", child, node);
	return result;
}

Node.replaceChild = function(node, child, old) { // FIXME notify if child already in document?
	var isEntering = document.compareDocumentPosition(child) & 0x01; 
	notify("DOMNodeRemoved", old, node); // FIXME
	var result = node.replaceChild(child, old);
	if (isEntering) notify("DOMNodeInserted", child, node);
	return result;
}

Node.removeChild = function(node, old) {
	notify("DOMNodeRemoved", old, node);
	var result = node.removeChild(old);
	return result;
}

Node.appendChild = function(node, child) { // FIXME notify if child already in document?
	var isEntering = document.compareDocumentPosition(child) & 0x01; 
	var result = node.appendChild(child);
	if (isEntering) notify("DOMNodeInserted", child, node);
	return result;
}

HTMLElement.insertAdjacentHTML  = function(element, pos, html) {
	var lookup = {
		"beforebegin": [ "previousSibling", false ],
		"afterbegin": [ "firstChild", true ],
		"beforeend": [ "lastChild", false ],
		"afterend": [ "nextSibling", true ]
	}
	var conf = lookup[pos.toLowerCase()];
	if (!conf) throw pos + " not valid position for insertAdjacentHTML";
	var relType = conf[0], after = conf[1], begin = element[relType], end;
	var result = element.insertAdjacentHTML(pos, html);
	if (after) end = begin, begin = element[relType];
	else end = element[relType].nextSibling, begin = (begin) ? begin.nextSibling : end.parentNode.firstChild;
	for (var node=begin; node!=end; node=node.nextSibling) {
		if (Node.ELEMENT_NODE != node.nodeType) continue;
		notify("DOMNodeInserted", node, element);
	}
	return result;
}

var notify = function(type, node, relatedNode) {
	if (!node.contains) return; // FIXME not handling text-nodes for now
	if (!document.documentElement.contains(node)) return;
	var event = document.createEvent("MutationEvent");
	event.initMutationEvent(type, true, false, relatedNode);
	Node.dispatchEvent(node, event);
}

/*
DOMMutation.prototype.domAttach = function(element) {
	var node = this.domNode;
	this.getAttributes = getAttributes;
	this._prevValues = this.getAttributes(); // for onpropertychange
	node.attachEvent("onpropertychange", onpropertychange);
}
var onInnerHTML = function(srcEvent) { // TODO handle element.innerHTML += "..."
	var element = srcEvent.srcElement;
	// FIXME should have "DOMNodeRemoved" events too
	for (var node=element.firstChild; node; node=node.nextSibling) {
		if (Node.ELEMENT_NODE != node.nodeType) continue;
		notify("DOMNodeInserted", node, element);
	}
}

var getAttributes = function() { // NOTE private method
	var node = this.domNode;
	if (node === document.documentElement); return getSpecifiedAttributes(node);
	// this approach is quicker, but crashes the browser on document.documentElement
	var values = {};
	var clone = node._cloneNode(false);
	var text = clone.outerHTML.replace(/^\S+/, "");
	var rex = /\s+([-_a-zA-Z0-9]+)=(?:"([^"]*)"|'([^']*)'|([^\s>]+))(\>)?/g;
	RegExp.lastIndex = 0;
	var m;
	while (m = rex.exec(text)) {
		var attrName = m[1];
		var val = m[2]; if ("" == val) val = m[3]; if ("" == val) val = m[4];
		values[attrName] = val;
		if (">" == m[5]) break; 
	}
	return values;
}

var getSpecifiedAttributes = function(node) {
	var values = {};
	var atts = node.attributes;
	for (var n=atts.length, i=0; i<n; i++) {
		var att = atts[i];
		if (att.specified) values[att.nodeName] = att.nodeValue;
	}
	return values;
}

var onpropertychange = function(srcEvent) { // FIXME re-write for new event handling implementation
	if (srcEvent.propertyName === "innerHTML") return onInnerHTML(srcEvent);
	var element = srcEvent.srcElement;
	var attrName = srcEvent.propertyName;
	var newValue = element[attrName];
	switch (typeof newValue) { // filter out non-attribute properties
		case "string": case "number": case "boolean": case "undefined": break;
		case "object": if (null == newValue) break;
		case "function": default: return;
	}
	var binding = DOMMutation(element);
	var prevValue = binding._prevValues[attrName];
	binding._prevValues[attrName] = newValue;
	var attrChange = (newValue != null) ? ((prevValue != null) ? 1 : 2) : 3; // MODIFICATION, ADDITION, REMOVAL;
	var event = document.createEvent("MutationEvent");
	event.initMutationEvent("DOMAttrModified", true, false, null, prevValue, newValue, attrName, attrChange);
	element.dispatchEvent(event);
}
*/

} // END if (document.attachEvent)


var Text = function() {};

var Document = function() {};

if (!document.importNode) {

Document.importNode = function(document, node, bDeep) {
	// FIXME need to check whether importing from xml or html document
	// and make use of attr.specifed, style.cssText, etc
	var tree;
	switch (node.nodeType) {
		case Node.ELEMENT_NODE:
			tree = document.createElement(node.nodeName);
			var attrs = node.attributes;
			for (var i=0; i<attrs.length; i++) {
				var attr = attrs[i];
				tree.setAttribute(attr.nodeName, attr.nodeValue);
			};
			var children = node.childNodes;
			if (bDeep) for (var i=0; i<children.length; i++) {
				var child = children[i];
				tree.appendChild(document.importNode(child, true));
			};
			break;
		case Node.CDATA_SECTION_NODE:
		case Node.TEXT_NODE:
			tree = document.createTextNode(node.nodeValue);
			break;
	}
	return tree;
}

}

if (!document.compareDocumentPosition && document.documentElement.contains) {

Document.compareDocumentPosition = function(document, node) { // FIXME compare nodes in different documents
	if (node == undefined) return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
	if (document === node) return 0;
	if (node.sourceIndex <= 0) return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
	if (node.ownerDocument === document) return 0x14; // Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING;
	return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
}

}

var Element = function() {}

if (!document.documentElement.compareDocumentPosition && document.documentElement.contains) {

Element.compareDocumentPosition = function(element, node) { // FIXME compare nodes in different documents
	if (node == undefined) return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
	if (element === node) return 0;
	if (node.sourceIndex <= 0 || element.sourceIndex <= 0) return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
	if (node === element.ownerDocument || node.contains(element)) return 0x0A; // Node.DOCUMENT_POSITION_CONTAINS | Node.DOCUMENT_POSITION_PRECEDING;
	if (element.contains(node)) return 0x14; // Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING;
	if (node.sourceIndex < element.sourceIndex) return 0x02; // Node.DOCUMENT_POSITION_PRECEDING;
	if (node.sourceIndex > element.sourceIndex) return 0x04; // Node.DOCUMENT_POSITION_FOLLOWING;
	return 0x01; // Node.DOCUMENT_POSITION_DISCONNECTED;
}

}

var DOMException = function() {};

DOMException.INDEX_SIZE_ERR = 1;
DOMException.DOMSTRING_SIZE_ERR = 2;
DOMException.HIERARCHY_REQUEST_ERR = 3;
DOMException.WRONG_DOCUMENT_ERR = 4;
DOMException.INVALID_CHARACTER_ERR = 5;
DOMException.NO_DATA_ALLOWED_ERR = 6;
DOMException.NO_MODIFICATION_ALLOWED_ERR = 7;
DOMException.NOT_FOUND_ERR = 8;
DOMException.NOT_SUPPORTED_ERR = 9;
DOMException.INUSE_ATTRIBUTE_ERR = 10;
DOMException.INVALID_STATE_ERR = 11;
DOMException.SYNTAX_ERR = 12;
DOMException.INVALID_MODIFICATION_ERR = 13;
DOMException.NAMESPACE_ERR = 14;
DOMException.INVALID_ACCESS_ERR = 15;
DOMException.VALIDATION_ERR = 16;
DOMException.TYPE_MISMATCH_ERR = 17;


var DOMTokenList = function(getter, setter) { // TODO parameter checking
	this._getText = getter;
	this._setText = setter;
	this.valueOf = getter;
	this.toString = getter;
	Object.defineProperty(this, "length", {
		"get": function() { return this._getTokens().length; }
	})
};
DOMTokenList.prototype.item = function(index) {
	return this._getTokens()[index];
}
DOMTokenList.prototype.contains = function(token) {
	var tokens = this._getTokens();
	return (tokens.indexOf(token) >= 0);
}
DOMTokenList.prototype.add = function(token) {
	if (this.contains(token)) return;
	var text = this._getText();
	var n = text.length,
		space = (n && text.charAt(n-1) != " ") ? " " : "";
	text += space + token;
	this._setText(text);
}
DOMTokenList.prototype.remove = function(token) { // FIXME this single spaces all tokens
	var text = this._getText();
	var prev = text.split(/\s+/);
	var next = prev.filter(function(str) { return str != token; });
	if (prev.length == next.length) return;
	this._setText(next.join(" "));
}
DOMTokenList.prototype.toggle = function(token) {
	if (this.contains(token)) this.remove(token);
	else this.add(token);		
}
DOMTokenList.prototype._getTokens = function() {
	var text = this._getText();
	if (!text) return [];
	return text.split(/\s+/);
}

var NodeList = function() {}

return {
	Node: Node,
	Text: Text,
	Document: Document,
	Element: Element,
	DOMException: DOMException,
	DOMTokenList: DOMTokenList,
	NodeList: NodeList
};

})();

Meeko.stuff.xplSystem.createNamespace("Meeko.DOM");
Meeko.XPL.Namespace.enhance(Meeko.DOM, Core);


]]>
</script>
</head>
</html>
